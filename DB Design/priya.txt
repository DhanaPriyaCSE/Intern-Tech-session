from flask import Flask, request, jsonify
from sqlalchemy import create_engine


app = Flask(__name__)

app.config['SECRET_KEY'] = 'YOUR-SECRET'
def connect_db():
    DATABASE_URL = "postgres+psycopg2://postgres:yogesh5201@localhost/postgres"
    return create_engine(DATABASE_URL)


db = connect_db()


from routes import *


if __name__ == '__main__':
    app.run(debug=True)


--------------------------
methods.py

from app import *
from models import *


def get_all_categories():
    categories = db.execute('select * from categories')
    result = [dict(row) for row in categories.fetchall()]
    return result


def get_all_products(category_id):
    products = db.execute('select * from products where category_id = \'{}\''.format(category_id))
    result = [dict(row) for row in products.fetchall()]
    return result


def get_category_name(category_id):
    category_name = db.execute('select name from categories where id = \'{}\''.format(category_id))
    return category_name.fetchone()


def get_seller_name(seller_id):
    seller_name = db.execute('select name from sellers where id = \'{}\''.format(seller_id))
    return seller_name.fetchone()


def get_cart_id(user_id):
    cart_id = db.execute('select id from carts where user_id = \'{}\''.format(user_id))
    return cart_id.fetchone()[0]


def get_product_details(product_id, user_id):
    details = db.execute('select id, name, price, seller_id, category_id '
                         'from products '
                         'where id = \'{}\''.format(product_id))

    for row in details.fetchall():
        result = formate(row,user_id)

    return result


def get_cart_product_quantity(user_id,product_id):
    cart_id = get_cart_id(user_id)

    ordered_quantity = db.execute('select product_quantity '
                                  'from cart_products '
                                  'where cart_id = \'{}\' and product_id = \'{}\''.format(cart_id, product_id))
    result = ordered_quantity.fetchone()[0]
    return result


def formate(row,user_id):
    dic = {}
    dic['product_id'] = row.id
    dic['name'] = row.name
    dic['price'] = row.price
    dic['seller_name'] = get_seller_name(row.seller_id)[0]
    dic['category_name'] = get_category_name(row.category_id)[0]
    dic['ordered_quantity'] = get_cart_product_quantity(user_id, row.id)
    return dic


def get_cart_products(user_id):
    products = db.execute('select product_id '
                          'from cart_products '
                          'where cart_id = (select id from carts where user_id = \'{}\' )'.format(user_id))
    result = [dict(row) for row in products.fetchall()]
    cart_product_details = []
    for i in range(len(result)):
        cart_product_details.append(get_product_details(result[i]['product_id'], user_id))

    return cart_product_details


def remove_product_from_cart(user_id, product_id):
    cart_id = get_cart_id(user_id)
    db.execute('delete from cart_products '
               'where cart_id = \'{}\' and product_id = \'{}\''.format(cart_id, product_id))
    return True


def add_product_to_cart(user_id, product_id):
    cart_id = get_cart_id(user_id)
    id = db.execute('select max(id) from cart_products')
    new_id = (id.fetchone()[0]) + 1
    db.execute('insert into cart_products values(\'{}\',\'{}\',\'{}\',\'1\')'.format(new_id, cart_id, product_id))
    return True


def quantity_check(quantity, product_id, user_id):
    stock = db.execute('select quantity from products where id = \'{}\''.format(product_id))
    ordered_quantity = get_cart_product_quantity(user_id, product_id)
    print(ordered_quantity, quantity)
    if stock.fetchone()[0] > (ordered_quantity+int(quantity)):
        return True
    else:
        return False


def update_product_quantity_in_cart(user_id, quantity, product_id):
    cart_id = get_cart_id(user_id)
    db.execute('update cart_products set product_quantity = \'{}\' '
               'where cart_id =\'{}\' and product_id = \'{}\''.format(quantity, cart_id, product_id))
    return True

------------------------------------------------------------------
models.py

from sqlalchemy.orm import relationship

from app import db
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base

base = declarative_base()


class User(base):
    __tablename__ = 'users'

    user_id = Column(Integer, primary_key=True, autoincrement=True)
    user_name = Column(String(20), nullable=False)
    password = Column(String(60), nullable=False)

    def __init__(self, user_name, password):
        self._user_name = user_name
        self._password = password

    def is_username_valid(self):
        _user_name = db.execute('select user_name '
                               'from users '
                               'where user_name = \'{}\' '.format(self._user_name))

        if _user_name.fetchone() is None:
            return False
        else:
            return True

    def is_password_valid(self):
        _user_password = db.execute('select * '
                                   'from users '
                                   'where password =  \'{}\''.format(self._password))

        if _user_password.fetchone() is None:
            return False
        else:
            return True


class Category(base):
    __tablename__ = 'categories'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(20), nullable=False)


class Seller(base):
    __tablename__ = 'sellers'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(20), nullable=False)

    def get_seller_name(self):
        seller_name = db.execute('select name from sellers where id = \'{}\''.format(self.id))
        return seller_name


class Product(base):
    __tablename__ = 'products'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(20), nullable=False)
    category_id = Column(Integer, ForeignKey('categories.id'))
    seller_id = Column(Integer, ForeignKey('sellers.id'))
    product_quantity = Column(Integer, nullable=False)


class Cart(base):
    __tablename__ = 'carts'
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey('users.user_id'))


class CartProduct(base):
    __tablename__ = 'cart_products'
    id = Column(Integer, primary_key=True, autoincrement=True)
    cart_id = Column(Integer, ForeignKey('carts.id'))
    product_id = Column(Integer, ForeignKey('products.id'))
    quantity = Column(Integer, nullable=False)

--------------------------------------------------
routes.py
--------------
from app import *
from models import *
from methods import *


@app.route('/login', methods=['GET', 'POST'])
def login():

    if request.method == 'POST':
        user_name = request.form['user_name']
        password = request.form['password']
        user = User(user_name, password)

        if user.is_username_valid():
            if user.is_password_valid():
                return 'Login successful'
            else:
                return 'Invalid username or password'
        else:
            return 'Invalid username or password'


@app.route('/categories', methods=['GET'])
def display_categories():
    categories = get_all_categories()
    return jsonify(categories)


@app.route('/categories/<category_id>/products', methods=['GET'])
def display_products(category_id):
    products = get_all_products(category_id)
    return jsonify(products)


@app.route('/cart/<user_id>', methods=['GET'])
def view_cart(user_id):
    result = get_cart_products(user_id)
    return jsonify(result)


@app.route('/cart/<user_id>/delete_product', methods=['DELETE'])
def delete_product_from_cart(user_id):
    product_id = request.form['product_id']
    remove_product_from_cart(user_id, product_id)
    return 'Product deleted from cart successfully'


@app.route('/cart/<user_id>/add_product', methods=['POST'])
def add_to_cart(user_id):
    product_id = request.form['product_id']
    add_product_to_cart(user_id, product_id)
    return 'Product added to cart successfully'


@app.route('/cart/<user_id>/update_quantity', methods=['PUT'])
def update_quantity(user_id):

    product_id = request.form['product_id']
    quantity = request.form['quantity']
    if quantity_check(quantity, product_id, user_id) == True:
        update_product_quantity_in_cart(user_id, quantity, product_id)
        return 'Product quantity in cart get updated'
    else:
        return 'Out of stock'